// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StringBuilder camelCase() errors if in kebab case 1`] = `"Invalid field \\"key\\". String must be in camel case. (pattern \\"^[a-z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder camelCase() errors if in pascal case 1`] = `"Invalid field \\"key\\". String must be in camel case. (pattern \\"^[a-z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder camelCase() errors if in snake case 1`] = `"Invalid field \\"key\\". String must be in camel case. (pattern \\"^[a-z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder camelCase() errors if less than 2 characters 1`] = `"Invalid field \\"key\\". String must be in camel case. (pattern \\"^[a-z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder camelCase() errors if starts with a number 1`] = `"Invalid field \\"key\\". String must be in camel case. (pattern \\"^[a-z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder contains() errors if token is an empty string 1`] = `"Contains requires a non-empty token."`;

exports[`StringBuilder contains() errors if token is not string 1`] = `"Contains requires a non-empty token."`;

exports[`StringBuilder contains() errors if value does not contain token 1`] = `"Invalid field \\"key\\". String does not include \\"oo\\"."`;

exports[`StringBuilder contains() errors if value matches default value and builder is required 1`] = `"Invalid field \\"key\\". String does not include \\"oo\\"."`;

exports[`StringBuilder kebabCase() errors if in camel case 1`] = `"Invalid field \\"key\\". String must be in kebab case. (pattern \\"^[a-z][\\\\x2D0-9a-z]+$\\")"`;

exports[`StringBuilder kebabCase() errors if in pascal case 1`] = `"Invalid field \\"key\\". String must be in kebab case. (pattern \\"^[a-z][\\\\x2D0-9a-z]+$\\")"`;

exports[`StringBuilder kebabCase() errors if in snake case 1`] = `"Invalid field \\"key\\". String must be in kebab case. (pattern \\"^[a-z][\\\\x2D0-9a-z]+$\\")"`;

exports[`StringBuilder kebabCase() errors if less than 2 characters 1`] = `"Invalid field \\"key\\". String must be in kebab case. (pattern \\"^[a-z][\\\\x2D0-9a-z]+$\\")"`;

exports[`StringBuilder kebabCase() errors if starts with a number 1`] = `"Invalid field \\"key\\". String must be in kebab case. (pattern \\"^[a-z][\\\\x2D0-9a-z]+$\\")"`;

exports[`StringBuilder lowerCase() errors if value is not lower case 1`] = `"Invalid field \\"key\\". String must be lower cased."`;

exports[`StringBuilder match() errors if pattern is not a regex 1`] = `"Match requires a regular expression to match against."`;

exports[`StringBuilder match() errors if value does not match pattern 1`] = `"Invalid field \\"key\\". String does not match. (pattern \\"oo\\")"`;

exports[`StringBuilder match() errors if value matches default value and builder is required 1`] = `"Invalid field \\"key\\". String does not match. (pattern \\"oo\\")"`;

exports[`StringBuilder notEmpty() errors if value is empty 1`] = `"Invalid field \\"key\\". String cannot be empty."`;

exports[`StringBuilder oneOf() errors if array contains a non-string 1`] = `"One of requires a non-empty array of strings."`;

exports[`StringBuilder oneOf() errors if array is empty 1`] = `"One of requires a non-empty array of strings."`;

exports[`StringBuilder oneOf() errors if not an array 1`] = `"One of requires a non-empty array of strings."`;

exports[`StringBuilder oneOf() errors if value is not in the list 1`] = `"Invalid field \\"key\\". String must be one of: foo, bar, baz"`;

exports[`StringBuilder pascalCase() errors if in camel case 1`] = `"Invalid field \\"key\\". String must be in pascal case. (pattern \\"^[A-Z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder pascalCase() errors if in kebab case 1`] = `"Invalid field \\"key\\". String must be in pascal case. (pattern \\"^[A-Z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder pascalCase() errors if in snake case 1`] = `"Invalid field \\"key\\". String must be in pascal case. (pattern \\"^[A-Z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder pascalCase() errors if less than 2 characters 1`] = `"Invalid field \\"key\\". String must be in pascal case. (pattern \\"^[A-Z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder pascalCase() errors if starts with a number 1`] = `"Invalid field \\"key\\". String must be in pascal case. (pattern \\"^[A-Z][0-9A-Za-z]+$\\")"`;

exports[`StringBuilder run() errors if a non-string value is used 1`] = `"Invalid field \\"key\\". Must be a string."`;

exports[`StringBuilder sizeOf() errors if length doesnt match 1`] = `"Invalid field \\"key\\". String length must be 3."`;

exports[`StringBuilder snakeCase() errors if in camel case 1`] = `"Invalid field \\"key\\". String must be in snake case. (pattern \\"^[a-z][0-9_a-z]+$\\")"`;

exports[`StringBuilder snakeCase() errors if in kebab case 1`] = `"Invalid field \\"key\\". String must be in snake case. (pattern \\"^[a-z][0-9_a-z]+$\\")"`;

exports[`StringBuilder snakeCase() errors if in pascal case 1`] = `"Invalid field \\"key\\". String must be in snake case. (pattern \\"^[a-z][0-9_a-z]+$\\")"`;

exports[`StringBuilder snakeCase() errors if less than 2 characters 1`] = `"Invalid field \\"key\\". String must be in snake case. (pattern \\"^[a-z][0-9_a-z]+$\\")"`;

exports[`StringBuilder snakeCase() errors if starts with a number 1`] = `"Invalid field \\"key\\". String must be in snake case. (pattern \\"^[a-z][0-9_a-z]+$\\")"`;

exports[`StringBuilder upperCase() errors if value is not upper case 1`] = `"Invalid field \\"key\\". String must be upper cased."`;
